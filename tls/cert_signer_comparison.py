"""
Gets the subject and issuer CN and O values from all certificates in a directory.
For each compares values using a fancy method to determine if they are them same or not.

"""
__author__ = "Jacob Davis as part of research at imaal.byu.edu"

import subprocess
import shlex
import glob
import argparse
import re
import math
from difflib import SequenceMatcher

openssl_command = "openssl x509 -inform pem -in {} -text"


def get_attr(attr, line):
    """
    Gets the value for an attribute from the ssl cert issuer/subject lines
    :param attr: the attribute e.g. CN, O
    :param line: the entire line
    :return: the value of the attribute
    """
    try:
        return re.search("{} = (.*?)(,|$)".format(attr), line).group(1).replace("\"", "")
    except:
        return ""


def print_table(table):
    """
    Prints table to stdout all fancy-like. Not my code
    :param table: the table generated by the parser
    """
    col_width = [max(len(x) for x in col) for col in zip(*table)]
    for line in table:
        print("| " + " | ".join("{:{}}".format(x, col_width[i])
                                for i, x in enumerate(line)) + " |")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Grabs each cert's issuer and subject and compares them")
    parser.add_argument('input', help="Input directory containing pem files")
    parser.add_argument('--csv', help="Optional. Write csv to this file instead of stdout", default="")
    args = parser.parse_args()

    table = [("Certificate", "", "Subject", "Issuer", "Similarity")]

    for cert in glob.glob("{}/*.pem".format(args.input.rstrip('/'))):
        openssl = subprocess.Popen(shlex.split(openssl_command.format(cert)), stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE, universal_newlines=True)
        out, err = openssl.communicate()
        issuer, subject = "", ""
        for line in out.split('\n'):
            if "Issuer: " in line:
                issuer = line.strip()
            if "Subject: " in line:
                subject = line.strip()
            if issuer != "" and subject != "":
                break

        s_cn = get_attr("CN", subject)
        i_cn = get_attr("CN", issuer)
        cn_sim = SequenceMatcher(None, s_cn, i_cn).ratio()
        table.append((cert.split("/")[-1], "CN", s_cn, i_cn, str(cn_sim), "MATCH" if cn_sim > .75 else ""))

        s_o = get_attr("O", subject)
        i_o = get_attr("O", issuer)
        o_sim = SequenceMatcher(None, s_o, i_o).ratio()
        table.append(("", "O", s_o, i_o, str(o_sim), "MATCH" if o_sim > .75 else ""))

    if args.csv != "":
        with open(args.csv, 'w') as output:
            for entry in table:
                output.write(",".join(entry))
                output.write("\n")
    else:
        print_table(table)

